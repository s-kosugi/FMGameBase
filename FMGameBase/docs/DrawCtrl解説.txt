
cDrawCtrlの流れ。(Priority有り)

DrawCtrlは描画コントロールクラスである。
このクラスに描画したいオブジェクトを登録する事によって、
描画順の制御と、描画オブジェクトに基づく描画をする事のできるクラスである。

１．描画優先の考え方
考え方としてはまずstd::listの描画オブジェクトリスト(m_listDrawObject)をDrawCtrlクラスに持っている。
描画オブジェクトリストは描画順に登録されており、登録はリストのfrontから登録される。
登録されているオブジェクトの描画優先度(m_nPri)を元にソートをし、描画順にリストが並び替えられる。

２．関数の流れ(外部からの動作)
RegistDrawObject(描画情報の登録)
　↓
Draw(優先度順での描画)

３．描画情報の登録関数(RegistDrawObject)について
この関数はスプライトクラス(cSprite)と読み込みファイル名(filename)を渡すことで、
ベースオブジェクトに対して"グラフィックハンドル(描画に必要なDXLibの読込ファイル番号)を設定する"関数である。
この関数のサブルーチンでLoadDrawFileを行った結果によりグラフィックハンドルをオブジェクトに対して設定をする。

３-１.描画情報の登録関数(RegistDrawObject)について(cEffectを渡す)
この関数はcEffectを渡す事もできる。
cEffectを渡した場合には、Effekseerのライブラリ関数を用いてエフェクトのリソースのハンドルを取得できる。
最終的にエフェクトオブジェクトに対してリソースのハンドルを設定する。


４．LoadSpriteについて
この関数は指定されたファイル名からスプライト画像を読み込み、グラフィックハンドルを返す関数である。
cDrawCtrlクラスは読込済みスプライトリスト(m_listSpLoaded)を持っており、重複チェックをする。
重複した場合には読み込み済みのグラフィックハンドルを返す。
新規に読込が発生した場合、DXLibのLoadGraphを行い、グラフィックハンドルを取得する。
取得したハンドルを読込済みスプライトリストに登録し、ハンドルを戻り値として返す。

４−１.LoadEffectについて
LoadSpriteと同じく、指定されたファイル名からエフェクトファイルを読み込み、リソースのハンドルを返す関数である。
LoadSpriteとの違いはEffekseerのLoadEffekseerEffectを用いてハンドルを取得する点である。

５．Drawについて
基本的には描画オブジェクトリストの順番で描画をしていく。
ただし、描画優先度変更要求(RequestChangeDrawPriority)関数により、描画優先度変更要求があった場合には、
描画より前に描画優先度の昇順で描画オブジェクトリストを並び替えをする。
描画優先度変更要求関数は、描画ベースクラス(IDrawBase)の優先度変更関数(SetPriority)実行時に呼ばれる。
描画はスプライト(cSprite)とエフェクト(cEffect)のどちらを描画するかで描画に必要な処理が分岐する。

５−１.DrawSpriteについて
この関数はスプライトを描画する関数である。
スプライトオブジェクト(cSprite)の情報を基に、描画に必要な情報を設定し描画する。
透明度とブレンドモード、描画色は事前に設定する必要がある。
DrawRectRotaGraph2Fを使う事により、回転拡縮Rect計算を加味した描画が可能である。

５−２.DrawEffectについて
この関数はエフェクトを描画する関数である。
エフェクトの初回描画時にはエフェクト自体を生成し、再生ハンドルを取得してエフェクトオブジェクトに設定する。
再生ハンドルを用いてエフェクトに対する拡縮、位置、回転、色を設定する。
個々でエフェクトを描画する為の関数(DrawEffekseer2D_Draw)は
DrawEffekseer2D_BeginとDrawEffekseer2D_Endを行う必要がある。