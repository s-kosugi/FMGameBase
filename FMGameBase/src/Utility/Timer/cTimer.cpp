/*==============================================================================*/
/*																				*/
/*	@file title	:	cTimer.cpp													*/
/*  @brief		:	タイマークラス												*/
/*	@written	:	s.kosugi													*/
/*	@create		:   2020/01/14													*/
/*																				*/
/*==============================================================================*/

#include "cTimer.h"
#include "cGame.h"

//==========================================================================================
// 定数
//==========================================================================================
const float cTimer::DEFAULT_TIME_SCALE = 1.0f;		// 初期タイムスケール

//==========================================================================================
//  コンストラクタ
//==========================================================================================
cTimer::cTimer( IBaseObject* parent, const std::string& name ):
	IBaseObject(parent,name),
	m_fCurrentTime( 0.0f ),
	m_fLimitTime( 0.0f ),
	m_fTimeScale( DEFAULT_TIME_SCALE )
{
}

//==========================================================================================
//  デストラクタ
//==========================================================================================
cTimer::~cTimer(void)
{
}

//==========================================================================================
//  初期化
//  limit : 計測時間(秒)
//==========================================================================================
void cTimer::Setup(float limit)
{
	Setup(limit, DEFAULT_TIME_SCALE);
}

//==========================================================================================
//  初期化
//  limit : 計測時間(秒)
//  scale : タイムスケール(1.0が等速)
//==========================================================================================
void cTimer::Setup(float limit, float scale)
{
	m_fLimitTime = limit;
	m_fTimeScale = scale;
	m_fCurrentTime = 0.0f;
}

//==========================================================================================
//  更新
//==========================================================================================
void cTimer::Update(void)
{
	m_fCurrentTime += cGame::GetInstance().GetDeltaTime() * m_fTimeScale;
}

//==========================================================================================
//  限界時間の設定
//==========================================================================================
void cTimer::SetLimit(float limit)
{
	m_fLimitTime = limit;

	if (m_fLimitTime < 0.0f)
		m_fLimitTime = 0.0f;
}
